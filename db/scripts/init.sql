CREATE TYPE permission_level_enum AS ENUM (
    'admin',
    'user',
    'banned'
);

CREATE TYPE talk_permission_level_enum AS ENUM (
    'admin',
    'user',
    'moderator'
    );

CREATE TYPE visibility_enum AS ENUM (
    'public',
    'followers',
    'private'
);

CREATE TYPE content_type_enum AS ENUM (
    'comment',
    'post'
);

CREATE TYPE invite_type_enum AS ENUM (
    'talk',
    'post'
);

CREATE TYPE challenge_type_enum AS ENUM (
    'question_options',
    'livestream_view',
    'comment_post',
    'create_post',
    'answer_question'
);

CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    avatar TEXT,
    avatar_mimeType TEXT,
    first_name TEXT,
    last_name TEXT,
    bio TEXT,
    email TEXT UNIQUE,
    pass TEXT,
    rate FLOAT NOT NULL DEFAULT 50 CONSTRAINT user_rate_constraint CHECK (rate >= 1 AND rate <= 100),
    date_created TIMESTAMP DEFAULT NOW(),
    home_town TEXT,
    university TEXT,
    work TEXT,
    work_field TEXT,
    permissions permission_level_enum NOT NULL DEFAULT 'user',
    points BIGINT NOT NULL DEFAULT 0 CONSTRAINT user_points_constraint CHECK (points >= 0)
    /* aÃ§oes que dao pontos:
    - dar rate em posts (5 pontos)
    - dar like em comentarios (1 ponto - pouco para nao spammar muitos likes)
    - dar rate num user (3 pontos)
    - criar post (100 pontos)
    - criar comentario (20 pontos)
    - receber rate num post meu (rate 3 - 5 pontos | rate 4 - 15 pontos | rate 5 - 30 pontos)
    - receber like num comentario meu (5 pontos)
    - receber rate no meu perfil (rate 3 - 3 pontos | rate 4 - 9 pontos | rate 5 - 18 pontos)
    */
);

CREATE TABLE follows (
    follower BIGINT REFERENCES users ON DELETE CASCADE,
    followed BIGINT REFERENCES users ON DELETE CASCADE,
    PRIMARY KEY(follower, followed)
);

CREATE TABLE users_rates (
    evaluator BIGINT REFERENCES users ON DELETE CASCADE,
    rate INTEGER NOT NULL CONSTRAINT user_user_rate_constraint CHECK (rate >= 1 AND rate <= 5),
    target_user BIGINT REFERENCES users ON DELETE CASCADE
);

CREATE TABLE conferences (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author BIGINT REFERENCES users ON DELETE CASCADE,
    title TEXT NOT NULL,
    about TEXT NOT NULL,
    local TEXT NOT NULL,
    dateStart TEXT NOT NULL ,
    dateEnd TEXT,
    avatar TEXT,
    avatar_mimeType TEXT,
    privacy visibility_enum NOT NULL DEFAULT 'public'
);

CREATE TABLE user_conference_points (
    user_id BIGINT REFERENCES users ON DELETE CASCADE,
    conference BIGINT REFERENCES conferences ON DELETE CASCADE,
    points BIGINT NOT NULL CONSTRAINT user_conference_points_constraint CHECK (points >= 0),
    CONSTRAINT unique_user_conference_points UNIQUE (user_id, conference)
);

CREATE TABLE talks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author BIGINT REFERENCES users ON DELETE CASCADE,
    conference BIGINT REFERENCES conferences ON DELETE CASCADE,
    title TEXT NOT NULL,
    about TEXT NOT NULL,
    livestream_URL TEXT,
    local TEXT NOT NULL,
    dateStart TEXT NOT NULL ,
    dateEnd TEXT,
    avatar TEXT,
    avatar_mimeType TEXT,
    privacy visibility_enum NOT NULL DEFAULT 'public',
	archived BOOLEAN DEFAULT FALSE,
	hidden BOOLEAN DEFAULT FALSE
);

CREATE TABLE posts (
    id BIGINT UNIQUE GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author BIGINT REFERENCES users ON DELETE CASCADE,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    search_tokens TSVECTOR, -- full-text search
    talk BIGINT REFERENCES talks ON DELETE CASCADE,
    content_image TEXT ARRAY,
    content_video TEXT ARRAY,
    content_document TEXT ARRAY,
    rate INTEGER NOT NULL DEFAULT 50 CONSTRAINT post_rate_constraint CHECK (rate >= 1 AND rate <= 100),
    visibility visibility_enum NOT NULL DEFAULT 'public',
    date_created TIMESTAMP DEFAULT NOW(),
    date_updated TIMESTAMP
);

CREATE TABLE files (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    mimeType TEXT NOT NULL,
    size INTEGER NOT NULL,
    post BIGINT REFERENCES posts ON DELETE CASCADE,
    CONSTRAINT unique_post_file UNIQUE (name, post)
);

CREATE TABLE comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author BIGINT REFERENCES users ON DELETE CASCADE,
    post BIGINT REFERENCES posts ON DELETE CASCADE,
    comment_ref BIGINT REFERENCES comments ON DELETE CASCADE,
    comment TEXT NOT NULL,
    date_created TIMESTAMP DEFAULT NOW(),
    date_updated TIMESTAMP DEFAULT NOW()
);

CREATE TABLE content_reports (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    reporter BIGINT REFERENCES users ON DELETE CASCADE,
    content_id BIGINT NOT NULL,
    content_type content_type_enum NOT NULL,
    description TEXT NOT NULL,
    admin_review BOOLEAN DEFAULT FALSE,
    date_reported TIMESTAMP DEFAULT NOW(),
    UNIQUE (reporter, content_id, content_type)
);

CREATE TABLE tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE TABLE posts_tags (
    post BIGINT REFERENCES posts ON DELETE CASCADE,
    tag BIGINT REFERENCES tags ON DELETE CASCADE,
    PRIMARY KEY(post, tag)
);

CREATE TABLE posts_subscriptions (
    subscriber BIGINT REFERENCES users ON DELETE CASCADE,
    post BIGINT REFERENCES posts ON DELETE CASCADE,
    CONSTRAINT pk_posts_subscriptions PRIMARY KEY(subscriber, post)
);

CREATE TABLE posts_rates (
    evaluator BIGINT REFERENCES users ON DELETE CASCADE,
    rate INTEGER NOT NULL CONSTRAINT user_post_rate_constraint CHECK (rate >= 1 AND rate <= 5),
    post BIGINT REFERENCES posts ON DELETE CASCADE
);

CREATE TABLE likes_a_comment (
    comment BIGINT REFERENCES comments ON DELETE CASCADE,
    author BIGINT REFERENCES users ON DELETE CASCADE
);

ALTER TABLE IF EXISTS ONLY likes_a_comment
    ADD CONSTRAINT likes_a_comment_pkey PRIMARY KEY (comment, author);

CREATE TABLE talk_participants (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    participant_user BIGINT REFERENCES users ON DELETE CASCADE,
    talk BIGINT REFERENCES talks ON DELETE CASCADE,
    points BIGINT DEFAULT 0,
    talk_permissions talk_permission_level_enum NOT NULL DEFAULT 'user',
    UNIQUE (participant_user, talk)
);

-- Invites are both for talks and posts
CREATE TABLE invites (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    invited_user BIGINT REFERENCES users ON DELETE CASCADE,
    invite_subject_id BIGINT NOT NULL,
    invite_type invite_type_enum NOT NULL,
    user_notified BOOLEAN DEFAULT FALSE, -- set to true when the invited user sees the invite notification
    date_invited TIMESTAMP DEFAULT NOW(),
    CONSTRAINT unique_invite UNIQUE (invited_user, invite_subject_id, invite_type)
);

CREATE TABLE challenges (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    dateStart TEXT NOT NULL,
    dateEnd TEXT,
    points BIGINT DEFAULT 0,
    challengeType challenge_type_enum NOT NULL,
    question TEXT DEFAULT NULL,
    answers TEXT ARRAY DEFAULT NULL,
    post BIGINT REFERENCES posts ON DELETE CASCADE DEFAULT NULL,
    talk BIGINT REFERENCES talks ON DELETE CASCADE
);

CREATE TABLE user_challenge (
    challenged BIGINT REFERENCES users ON DELETE CASCADE,
    challenge BIGINT REFERENCES challenges ON DELETE CASCADE,
    answer TEXT,
    complete BOOLEAN DEFAULT FALSE,
    PRIMARY KEY(challenged, challenge)
);

CREATE TABLE products (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    stock INT NOT NULL CONSTRAINT product_stock_constraint CHECK (stock >= 0),
    points INT NOT NULL,
    image TEXT,
    date_created TIMESTAMP DEFAULT NOW(),
    conference BIGINT DEFAULT NULL REFERENCES conferences ON DELETE CASCADE
);

CREATE TABLE product_exchanges (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    buyer BIGINT REFERENCES users ON DELETE CASCADE,
    product BIGINT REFERENCES products ON DELETE CASCADE
);


/* award points on TALKS */
/**
*
*   TRIGGERS
*
*/

/* Update user_challenge when user creates a new post on a talk */
CREATE OR REPLACE FUNCTION update_challenge_posts() RETURNS trigger LANGUAGE plpgsql
AS $$
    DECLARE
        challengeId BIGINT;
    BEGIN
        IF (EXISTS(
                SELECT c.id
                FROM challenges c
                WHERE challengetype = 'create_post' AND
                        c.talk = NEW.talk AND
                        c.dateend::timestamp with time zone > NOW() AND
                        c.id NOT IN (SELECT uc.challenge FROM user_challenge uc WHERE uc.challenged = NEW.author)
            )
            ) THEN
                SELECT c.id INTO challengeId
                FROM challenges c
                WHERE challengetype = 'create_post' AND
                        c.talk = NEW.talk AND
                        c.dateend::timestamp with time zone > NOW() AND
                        c.id NOT IN (SELECT uc.challenge FROM user_challenge uc WHERE uc.challenged = NEW.author)
                ORDER BY c.id
                LIMIT 1;

                INSERT INTO user_challenge (challenged, challenge, answer, complete)
                VALUES (NEW.author, challengeId, NULL, TRUE);
        END IF;
        RETURN NEW;
    END
    $$;

CREATE TRIGGER update_challenge_posts
AFTER INSERT ON posts
    FOR EACH ROW
    EXECUTE PROCEDURE update_challenge_posts();

/* Update user_challenge when user creates a new comment on a post of a talk */
CREATE FUNCTION update_challenge_comments() RETURNS trigger LANGUAGE plpgsql
AS $$
    DECLARE
        challengeId BIGINT;
    BEGIN
        IF (EXISTS(
                SELECT c.id
                FROM challenges c
                WHERE challengetype = 'comment_post' AND
                        c.talk IN (SELECT p.talk FROM posts p WHERE p.id = NEW.post) AND
                        c.post = NEW.post AND
                        c.dateend::timestamp with time zone > NOW() AND
                        c.id NOT IN (SELECT uc.challenge FROM user_challenge uc WHERE uc.challenged = NEW.author)
                )
            ) THEN
                SELECT c.id INTO challengeId
                FROM challenges c
                WHERE challengetype = 'comment_post' AND
                        c.talk IN (SELECT p.talk FROM posts p WHERE p.id = NEW.post) AND
                        c.post = NEW.post AND
                        c.dateend::timestamp with time zone > NOW() AND
                        c.id NOT IN (SELECT uc.challenge FROM user_challenge uc WHERE uc.challenged = NEW.author)
                ORDER BY c.id
                LIMIT 1;

                INSERT INTO user_challenge (challenged, challenge, answer, complete)
                VALUES (NEW.author, challengeId, NULL, TRUE);
        END IF;
        RETURN NEW;
    END
    $$;

CREATE TRIGGER update_challenge_comments
    AFTER INSERT ON comments
    FOR EACH ROW
EXECUTE PROCEDURE update_challenge_comments();

/* Add talk owner to talk_participants as admin */
CREATE OR REPLACE FUNCTION talk_owner_participant() RETURNS trigger LANGUAGE plpgsql
AS $$
    BEGIN
       INSERT INTO talk_participants (participant_user, talk, talk_permissions)
       VALUES (NEW.author, NEW.id, 'admin');
    RETURN NEW;
    END;
    $$;

CREATE TRIGGER talk_owner_participant
    AFTER INSERT ON talks
    FOR EACH ROW
    EXECUTE PROCEDURE talk_owner_participant();

/* Give challenge points to user upon completion */
CREATE FUNCTION update_points_user() RETURNS trigger
    LANGUAGE plpgsql
AS $$
DECLARE
    challenge_reward BIGINT;
    challenge_talk BIGINT;
    challenge_conference BIGINT;
BEGIN
    IF NEW.complete IS TRUE THEN
        challenge_reward := (SELECT points FROM challenges WHERE id = NEW.challenge);
        challenge_talk := (SELECT talk FROM challenges WHERE id = NEW.challenge);
        challenge_conference := (SELECT conference FROM talks WHERE id = challenge_talk);
        -- award points on talk
        UPDATE talk_participants SET points = talk_participants.points + challenge_reward WHERE talk_participants.participant_user = NEW.challenged AND talk_participants.talk = challenge_talk;
        -- award points on conference
        INSERT INTO user_conference_points (user_id, conference, points) VALUES (NEW.challenged, challenge_conference, challenge_reward)
            ON CONFLICT ON CONSTRAINT unique_user_conference_points
            DO UPDATE SET points = user_conference_points.points + challenge_reward WHERE user_conference_points.user_id = NEW.challenged AND user_conference_points.conference = challenge_conference;
    END IF;
    RETURN NEW;
END$$;

CREATE TRIGGER update_points_of_user
    AFTER INSERT OR UPDATE ON user_challenge
    FOR EACH ROW
EXECUTE PROCEDURE update_points_user();

/* If user expresses joins a conference, we can consider him as notified */
CREATE FUNCTION notified_on_attendance_intent() RETURNS trigger
    LANGUAGE plpgsql
AS $$BEGIN
    UPDATE invites 
        SET user_notified = TRUE 
        WHERE invited_user = NEW.participant_user 
            AND invite_subject_id = NEW.talk 
            AND invite_type = 'talk';
    RETURN NEW;
END$$;

CREATE TRIGGER notified_on_intent
    AFTER INSERT ON talk_participants
    FOR EACH ROW
EXECUTE PROCEDURE notified_on_attendance_intent();

/* User cannot enter a talk withou having permission */
CREATE OR REPLACE FUNCTION user_can_join_talk(_talk_id BIGINT, _user_id BIGINT)
RETURNS boolean AS $$
	SELECT EXISTS (
        SELECT *
        FROM talks
        WHERE talks.id = _talk_id AND
        (
            talks.privacy = 'public' OR
            talks.author = _user_id OR
            (talks.privacy = 'followers' AND _user_id IN (SELECT follower FROM follows WHERE followed = talks.author)) OR
            _user_id IN (SELECT invited_user
                    FROM invites
                    WHERE invited_user = _user_id AND
                    invite_subject_id = _talk_id AND
                    invite_type = 'talk'
                )
        )
    );
$$ LANGUAGE SQL;

CREATE FUNCTION join_talk_if_permitted() RETURNS trigger
    LANGUAGE plpgsql
AS $$BEGIN
    IF NOT user_can_join_talk(NEW.talk, NEW.participant_user) THEN
      RAISE EXCEPTION 'cannot join talk without permission';
   END IF;

   RETURN NEW;
END$$;

CREATE TRIGGER join_talk_on_permission
    BEFORE INSERT ON talk_participants
    FOR EACH ROW
EXECUTE PROCEDURE join_talk_if_permitted();

/* Utils functions fetching users according to their participance in talk/post */
-- talkS
CREATE OR REPLACE FUNCTION retrieve_talk_invited_or_joined_users(_talk_id BIGINT)
RETURNS TABLE(notified_user BIGINT) AS $$
	SELECT invited_user
        FROM invites
        WHERE invite_subject_id = _talk_id AND invite_type = 'talk'
    UNION
    SELECT participant_user
        FROM talk_participants
        WHERE talk = _talk_id;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION retrieve_talk_uninvited_subscribers(_talk_id BIGINT)
RETURNS TABLE(uninvited_subscriber BIGINT) AS $$
	SELECT follower
        FROM follows, talks
        WHERE followed = author AND 
        talks.id = _talk_id AND
        follower NOT IN (SELECT * FROM retrieve_talk_invited_or_joined_users(_talk_id));
$$ LANGUAGE SQL;
-- POSTS
CREATE OR REPLACE FUNCTION retrieve_post_invited_or_subscribed_users(_post_id BIGINT)
RETURNS TABLE(invited_user BIGINT) AS $$
	SELECT invited_user
        FROM invites
        WHERE invite_subject_id = _post_id AND invite_type = 'post'
    UNION
    SELECT subscriber
        FROM posts_subscriptions
        WHERE post = _post_id;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION retrieve_post_uninvited_subscribers(_post_id BIGINT, _inviter_id BIGINT)
RETURNS TABLE(uninvited_subscriber BIGINT) AS $$
	SELECT DISTINCT follower
        FROM follows
        WHERE followed = _inviter_id AND 
        follower NOT IN (SELECT * FROM retrieve_post_invited_or_subscribed_users(_post_id));
$$ LANGUAGE SQL;

/* Utils functions fetching notifications (administration and user profile) */
-- USER INVITE NOTIFICATIONS
CREATE OR REPLACE FUNCTION retrieve_user_notifications(_user_id BIGINT)
RETURNS TABLE(id BIGINT, invite_subject_id BIGINT, title TEXT, invite_type invite_type_enum, date_invited TIMESTAMP) AS $$
	SELECT DISTINCT invites.id, invite_subject_id,
    (CASE WHEN invite_type = 'talk' THEN talks.title ELSE posts.title END) as title, invite_type, date_invited
        FROM invites, talks, posts
        WHERE (
                (invite_type = 'talk' AND talks.id = invite_subject_id) OR
                (invite_type = 'post' AND posts.id = invite_subject_id)
            ) AND
            invited_user = _user_id AND
            invites.user_notified = FALSE
        ORDER BY date_invited DESC;
$$ LANGUAGE SQL;
-- ADMIN REPORT NOTIFICATIONS (ALL ADMINS RECEIVE THE SAME NOTIFICATIONS)
CREATE OR REPLACE FUNCTION retrieve_admin_notifications()
RETURNS TABLE(content_id BIGINT, content_description TEXT, content_type content_type_enum,
                reported_user_id BIGINT, reported_user_email TEXT, reported_user_first_name TEXT, reported_user_last_name TEXT, reports_amount BIGINT) AS $$
	SELECT content_id, 
            (CASE WHEN content_type = 'post' THEN posts.title ELSE comments.comment END) as content_description, 
            content_type,
            users.id,
            users.email,
            users.first_name,
            users.last_name,
            COUNT(DISTINCT content_reports.id) as reports_amount
        FROM content_reports, posts, comments, users
        WHERE admin_review = FALSE AND
            (
                (content_type = 'post' AND posts.id = content_id AND users.id = posts.author) OR
                (content_type = 'comment' AND comments.id = content_id AND users.id = comments.author)
            )
        GROUP BY content_id, content_description, content_type, users.id
        ORDER BY reports_amount desc;
$$ LANGUAGE SQL;
-- ADMIN EXCHANGE NOTIFICATIONS
CREATE OR REPLACE FUNCTION retrieve_exchange_notifications()
RETURNS TABLE(exchange_id BIGINT, buyer_id BIGINT, buyer_first_name TEXT, buyer_last_name TEXT,
                product_id BIGINT, product_name TEXT) AS $$
	SELECT product_exchanges.id, product_exchanges.buyer, users.first_name, users.last_name,
            product_exchanges.product, products.name
        FROM product_exchanges, users, products
        WHERE users.id = product_exchanges.buyer AND products.id = product_exchanges.product;
$$ LANGUAGE SQL;

/* award points to users for GENERAL shop */
CREATE OR REPLACE FUNCTION give_points_to_user(_user_id BIGINT, _points_amount NUMERIC)
RETURNS void AS $$
	UPDATE users SET points = points + _points_amount
        WHERE id = _user_id;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION give_points_to_post_author(_post_id BIGINT, _points_amount NUMERIC)
RETURNS void AS $$
	UPDATE users SET points = points + _points_amount
        WHERE id IN (SELECT author FROM posts WHERE posts.id = _post_id);
$$ LANGUAGE SQL;

/* Exchange product in shops */
CREATE OR REPLACE FUNCTION exchange_product(_product_id BIGINT, _user_id BIGINT) RETURNS void AS $$
DECLARE
    product_conference BIGINT;
    product_cost INT;
BEGIN
    product_conference := (SELECT conference FROM products WHERE id = _product_id);
    product_cost := (SELECT points FROM products WHERE id = _product_id);

    IF product_conference IS NULL THEN -- product from general shop
        UPDATE users SET points = points - product_cost
            WHERE id = _user_id;
    ELSE -- product from conference shop
        UPDATE user_conference_points SET points = points - product_cost
            WHERE user_id = _user_id AND conference = product_conference;
    END IF;

	UPDATE products SET stock = stock - 1 WHERE id = _product_id; -- reduce product stock
    INSERT INTO product_exchanges (buyer, product) VALUES (_user_id, _product_id); -- create exchange notification
END$$ LANGUAGE plpgsql;

/**
*
* triggers to award GENERAL points for actions
*
*/
-- USER RATING
CREATE FUNCTION award_points_on_user_rate() RETURNS trigger AS $$
    DECLARE
        RATE_USER_POINTS CONSTANT NUMERIC := 3;
        RECEIVE_3_RATE_USER_POINTS CONSTANT NUMERIC := 3;
        RECEIVE_4_RATE_USER_POINTS CONSTANT NUMERIC := 9;
        RECEIVE_5_RATE_USER_POINTS CONSTANT NUMERIC := 18;
    BEGIN
        PERFORM give_points_to_user(NEW.evaluator, RATE_USER_POINTS);

        CASE WHEN NEW.rate = 3 THEN PERFORM give_points_to_user(NEW.target_user, RECEIVE_3_RATE_USER_POINTS);
            WHEN NEW.rate = 4 THEN PERFORM give_points_to_user(NEW.target_user, RECEIVE_4_RATE_USER_POINTS);
            WHEN NEW.rate = 5 THEN PERFORM give_points_to_user(NEW.target_user, RECEIVE_5_RATE_USER_POINTS);
            ELSE NULL;
        END CASE;
        RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER award_points_for_user_rate
    AFTER INSERT ON users_rates
    FOR EACH ROW
EXECUTE PROCEDURE award_points_on_user_rate();
-- POST RATING
CREATE FUNCTION award_points_on_post_rate() RETURNS trigger
    LANGUAGE plpgsql
AS $$
DECLARE
    RATE_POST_POINTS CONSTANT NUMERIC := 5;
    RECEIVE_3_RATE_POST_POINTS CONSTANT NUMERIC := 3;
    RECEIVE_4_RATE_POST_POINTS CONSTANT NUMERIC := 15;
    RECEIVE_5_RATE_POST_POINTS CONSTANT NUMERIC := 30;
BEGIN
    PERFORM give_points_to_user(NEW.evaluator, RATE_POST_POINTS);

    CASE WHEN NEW.rate = 3 THEN PERFORM give_points_to_post_author(NEW.post, RECEIVE_3_RATE_POST_POINTS);
        WHEN NEW.rate = 4 THEN PERFORM give_points_to_post_author(NEW.post, RECEIVE_4_RATE_POST_POINTS);
        WHEN NEW.rate = 5 THEN PERFORM give_points_to_post_author(NEW.post, RECEIVE_5_RATE_POST_POINTS);
        ELSE NULL;
    END CASE;
    RETURN NEW;
END$$;

CREATE TRIGGER award_points_for_post_rate
    AFTER INSERT ON posts_rates
    FOR EACH ROW
EXECUTE PROCEDURE award_points_on_post_rate();
-- COMMENT LIKE
CREATE FUNCTION award_points_on_comment_like() RETURNS trigger
    LANGUAGE plpgsql
AS $$
DECLARE
    LIKE_COMMENT_POINTS CONSTANT NUMERIC := 1;
    RECEIVE_LIKE_COMMENT_POINTS CONSTANT NUMERIC := 5;
BEGIN
    PERFORM give_points_to_user(NEW.author, LIKE_COMMENT_POINTS);

    UPDATE users SET points = points + RECEIVE_LIKE_COMMENT_POINTS
        WHERE id IN (SELECT author FROM comments WHERE comments.id = NEW.comment);
    RETURN NEW;
END$$;

CREATE TRIGGER award_points_for_comment_like
    AFTER INSERT ON likes_a_comment
    FOR EACH ROW
EXECUTE PROCEDURE award_points_on_comment_like();
-- POST CREATION
CREATE FUNCTION award_points_on_post_creation() RETURNS trigger
    LANGUAGE plpgsql
AS $$
DECLARE
    CREATE_POST_POINTS CONSTANT NUMERIC := 100;
BEGIN
    PERFORM give_points_to_user(NEW.author, CREATE_POST_POINTS);
    RETURN NEW;
END$$;

CREATE TRIGGER award_points_for_post_creation
    AFTER INSERT ON posts
    FOR EACH ROW
EXECUTE PROCEDURE award_points_on_post_creation();
-- COMMENT CREATION
CREATE FUNCTION award_points_on_comment_creation() RETURNS trigger
    LANGUAGE plpgsql
AS $$
DECLARE
    CREATE_COMMENT_POINTS CONSTANT NUMERIC := 20;
BEGIN
    PERFORM give_points_to_user(NEW.author, CREATE_COMMENT_POINTS);
    RETURN NEW;
END$$;

CREATE TRIGGER award_points_for_comment_creation
    AFTER INSERT ON comments
    FOR EACH ROW
EXECUTE PROCEDURE award_points_on_comment_creation();



/**
*
* INSERTS
*
*/

/**
* USERS
*/
-- Unhashed password: 'adminadmin'
INSERT INTO users (email, pass, first_name, last_name, bio, home_town, university, work, work_field, permissions) VALUES ('admin@gmail.com','d82494f05d6917ba02f7aaa29689ccb444bb73f20380876cb05d1f37537b7892', 'Admin', 'Admina', 'Sou medico, ola', 'Rio de Janeiro', 'FMUP', 'Hospital S. Joao', 'Cardiology', 'admin');
-- Following unhashed passwords: 'useruser'
INSERT INTO users (email, pass, first_name, last_name, bio, university, work, permissions) VALUES ('user1@gmail.com','e172c5654dbc12d78ce1850a4f7956ba6e5a3d2ac40f0925fc6d691ebb54f6bf', 'User', 'Doe','ICBAS', 'ICBAS', 'Surgeon', 'user');
INSERT INTO users (email, pass, first_name, last_name, bio, permissions, points) VALUES ('user2@gmail.com','e172c5654dbc12d78ce1850a4f7956ba6e5a3d2ac40f0925fc6d691ebb54f6bf', 'John', 'User', 'FMUC', 'user', 5000);
INSERT INTO users (email, pass, first_name, last_name, bio, home_town, work_field, permissions) VALUES ('user3@gmail.com','e172c5654dbc12d78ce1850a4f7956ba6e5a3d2ac40f0925fc6d691ebb54f6bf', 'Michael', 'Meyers', 'ICBAS', 'Portalegre', 'Cardiology', 'user');
INSERT INTO users (email, pass, first_name, last_name, bio, home_town, university, work, work_field, permissions) VALUES ('admin2@gmail.com','d82494f05d6917ba02f7aaa29689ccb444bb73f20380876cb05d1f37537b7892', 'Second', 'Admin', 'Sou doutor, adeus', 'Rio de Dezembro', 'FMUP', 'Hospital S. Joao', 'Cardiology', 'admin');

/** 
* USERS FOLLOWING USERS
*/
INSERT INTO follows (follower, followed) VALUES (1, 2);
INSERT INTO follows (follower, followed) VALUES (1, 3);
INSERT INTO follows (follower, followed) VALUES (2, 3);
INSERT INTO follows (follower, followed) VALUES (3, 4);

/** 
* RATINGS OF USERS
*/
INSERT INTO users_rates (evaluator, rate, target_user) VALUES (4, 2, 2);
INSERT INTO users_rates (evaluator, rate, target_user) VALUES (2, 4, 3);
INSERT INTO users_rates (evaluator, rate, target_user) VALUES (4, 2, 3);
INSERT INTO users_rates (evaluator, rate, target_user) VALUES (2, 3, 4);
INSERT INTO users_rates (evaluator, rate, target_user) VALUES (3, 1, 4);

INSERT INTO conferences(author, title, about, local, dateStart, dateEnd, privacy) VALUES (1, 'Musical Conference', 'This conference was made for music lovers', 'Porto', '2019-06-06T21:30', '2019-07-07T21:30', 'public');
INSERT INTO conferences(author, title, about, local, dateStart, dateEnd, privacy) VALUES (1, 'Diverse Conference', 'This conference was made everything else', 'Porto', '2019-06-06T23:30', '2019-08-08T21:30', 'public');

INSERT INTO user_conference_points (user_id, conference, points) VALUES (3, 2, 1100);

INSERT INTO talks(author, conference, title, about, livestream_URL, local, dateStart, dateEnd, privacy, avatar) VALUES (1, 1, 'Chill Music', 'This talk was created by an admin that likes chill music', 'https://www.youtube.com/embed/hHW1oY26kxQ' , 'Porto', '2019-05-05T21:30', '2019-05-08T21:30', 'public', 'https://static1.squarespace.com/static/57e7d4db44024351976cbf08/t/5b0714d12b6a28312911c518/1527190744736/music-200x200.png?format=300w');
INSERT INTO talks(author, conference, title, about, livestream_URL, local, dateStart, dateEnd, privacy, avatar) VALUES (2, 1, 'Nasa Talk', 'This talk was created by a user that likes Nasa', 'https://www.youtube.com/embed/4993sBLAzGA' , 'Porto', '2019-05-06T21:30', '2019-05-10T21:30', 'public', 'http://lofrev.net/wp-content/photos/2014/09/Nasa-icon-e1410677250198.jpg');
INSERT INTO talks(author, conference, title, about, livestream_URL, local, dateStart, dateEnd, privacy) VALUES (3, 2, 'User talk 2', 'This talk was created by n user', 'https://www.youtube.com/embed/PPPLiCWllv8' , 'Porto', '2019-05-05T21:30', '2019-05-06T21:30', 'public');
INSERT INTO talks(author, conference, title, about, livestream_URL, local, dateStart, dateEnd, privacy) VALUES (1, 2, 'Admin talk 2', 'This talk was created by an admin', 'https://www.youtube.com/embed/PPPLiCWllv8' , 'Porto', '2019-05-05T21:30', '2019-05-06T21:30', 'public');
INSERT INTO talks(author, conference, title, about, livestream_URL, local, dateStart, dateEnd, privacy) VALUES (2, 2, 'User talk 3', 'This talk was created by a user', 'https://www.youtube.com/embed/PPPLiCWllv8' , 'Porto', '2019-05-05T21:30', '2019-05-06T21:30', 'public');
INSERT INTO talks(author, conference, title, about, livestream_URL, local, dateStart, dateEnd, privacy) VALUES (4, 2, 'Titulo', 'This is a public talk, any person can join', 'https://www.youtube.com/embed/PPPLiCWllv8' , 'Porto', '2019-05-05T21:30', '2019-05-06T21:30', 'public');
INSERT INTO talks(author, conference, title, about, livestream_URL, local, dateStart, dateEnd, privacy) VALUES (3, 2, 'Titulo 2', 'This is a followers or invite only talk (visibility: followers)', 'https://www.youtube.com/embed/PPPLiCWllv8' , 'Porto', '2019-05-05T21:30', '2019-05-06T21:30', 'followers');
INSERT INTO talks(author, conference, title, about, livestream_URL, local, dateStart, dateEnd, privacy) VALUES (4, 2, 'Titulo 3', 'This is an invite only talk (visibility: private)', 'https://www.youtube.com/embed/PPPLiCWllv8' , 'Porto', '2019-05-05T21:30', '2019-05-06T21:30', 'private');

INSERT INTO talk_participants (participant_user, talk, talk_permissions) VALUES (2, 1, 'moderator');
INSERT INTO talk_participants (participant_user, talk, talk_permissions) VALUES (3, 1, 'user');
INSERT INTO talk_participants (participant_user, talk, talk_permissions) VALUES (1, 2, 'moderator');
INSERT INTO talk_participants (participant_user, talk, talk_permissions) VALUES (3, 2, 'admin');
INSERT INTO talk_participants (participant_user, talk, talk_permissions) VALUES (2, 3, 'admin');
INSERT INTO talk_participants (participant_user, talk, talk_permissions) VALUES (1, 3, 'user');

INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This post should NOT be visible', 'private', '2018-12-03');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (3, 'User post', 'This is a post done by a mere user 3', 'public', '2018-12-03');
INSERT INTO posts (author, title, content, date_created) VALUES (1, 'Very big Admin post title, so big it gets multiple lines to be able to output it, omg still not enough, really need more characters please I beg you', 'This is a post done by the admin', '2018-12-02');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'followers', '2018-12-01');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'public', '2018-12-23');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-21');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'public', '2018-12-05');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-15');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'followers', '2018-12-09');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-10');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'followers', '2018-12-14');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-13');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'public', '2018-12-07');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-27');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'followers', '2018-12-30');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-06');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'public', '2018-12-09');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-16');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'followers', '2018-12-27');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-18');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'followers', '2018-12-02');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-22');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (1, 'Admin post', 'This is a post done by the admin', 'followers', '2018-12-12');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (2, 'User post', 'This is a post done by a mere user following the admin', 'public', '2018-12-20');
INSERT INTO posts (author, title, content, visibility, date_created) VALUES (3, 'User post', 'This is a post done by a mere user', 'public', '2018-12-23');

/* POSTS IN talk */
INSERT INTO posts (author, title, content, talk, visibility, date_created) VALUES (2, 'User post', 'This post was created by a user and appears in a talk', 1, 'private', '2018-12-03');
INSERT INTO posts (author, title, content, talk, visibility, date_created) VALUES (3, 'User post', 'This post was created by a user and appears in a talk', 1, 'public', '2018-12-03');
INSERT INTO posts (author, title, content, talk, date_created) VALUES (1, 'Admin post', 'This post was created by an admin and appears in a talk', 1, '2018-12-02');
INSERT INTO posts (author, title, content, talk, visibility, date_created) VALUES (2, 'User post', 'This post was created by a user and appears in a talk', 2, 'followers', '2018-12-01');
INSERT INTO posts (author, title, content, talk) VALUES (1, 'Admin post', 'This is a post done by the admin and appears in a talk', 2);
INSERT INTO posts (author, title, content, talk) VALUES (2, 'User post', 'This is a post done by a mere user following the admin and appears in a talk', 1);

-- Initialize full-text search for posts
UPDATE posts SET search_tokens = to_tsvector(title || ' ' || content);

INSERT INTO content_reports (reporter, content_id, content_type, description) VALUES (1, 2, 'post', 'Insulted my son');
INSERT INTO content_reports (reporter, content_id, content_type, description) VALUES (1, 3, 'post', 'Chauvinist content');
INSERT INTO content_reports (reporter, content_id, content_type, description) VALUES (2, 3, 'post', 'Because yes');
INSERT INTO content_reports (reporter, content_id, content_type, description) VALUES (3, 3, 'post', 'Bery much disrespect');

INSERT INTO comments (author, post, comment) VALUES (1, 1, 'This is a comment done by the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 2, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (1, 3, 'This is a comment done by the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 4, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (1, 5, 'This is a comment done by the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 6, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (1, 7, 'This is a comment done by the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 8, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (1, 9, 'This is a comment done by the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 10, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 1, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (1, 2, 'This is a comment done by the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 3, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (1, 4, 'This is a comment done by the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 5, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (1, 6, 'This is a comment done by the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 7, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (1, 8, 'This is a comment done by the admin');
INSERT INTO comments (author, post, comment) VALUES (2, 9, 'This is a comment done by a mere user following the admin');
INSERT INTO comments (author, post, comment) VALUES (1, 10, 'This is a comment done by the admin');

INSERT INTO content_reports (reporter, content_id, content_type, description) VALUES (1, 2, 'comment', 'Insults my family');
INSERT INTO content_reports (reporter, content_id, content_type, description) VALUES (2, 2, 'comment', 'I dont like it');
INSERT INTO content_reports (reporter, content_id, content_type, description) VALUES (1, 3, 'comment', 'Says hitler did nothing wrong');
INSERT INTO content_reports (reporter, content_id, content_type, description) VALUES (1, 12, 'comment', 'Insults my dog');
INSERT INTO content_reports (reporter, content_id, content_type, description) VALUES (1, 13, 'comment', 'Insults my mom');

/* SECOND LEVEL COMMENTS */
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 1, 'This is a 2nd level comment done by the admin 1');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 1, 'This is a 2nd level comment done by the admin 2');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 1, 'This is a 2nd level comment done by the admin 3');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 1, 'This is a 2nd level comment done by the admin 4');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 1, 'This is a 2nd level comment done by the admin 5');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 1, 'This is a 2nd level comment done by the admin 6');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 1, 'This is a 2nd level comment done by the admin 7');

INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 2, 'This is a 2nd level comment done by the admin 1');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 2, 'This is a 2nd level comment done by the admin 2');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 2, 'This is a 2nd level comment done by the admin 3');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 2, 'This is a 2nd level comment done by the admin 4');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 2, 'This is a 2nd level comment done by the admin 5');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 2, 'This is a 2nd level comment done by the admin 6');
INSERT INTO comments (author, post, comment_ref, comment) VALUES (1, 10, 2, 'This is a 2nd level comment done by the admin 7');

/**
* tags related to content
**/
INSERT INTO tags (name) VALUES ('Question');
INSERT INTO tags (name) VALUES ('Article');
INSERT INTO tags (name) VALUES ('Research Paper');
INSERT INTO tags (name) VALUES ('talk Paper');
INSERT INTO tags (name) VALUES ('Presentation');
INSERT INTO tags (name) VALUES ('Poster');
INSERT INTO tags (name) VALUES ('Book');
INSERT INTO tags (name) VALUES ('Project');
INSERT INTO tags (name) VALUES ('Images');
INSERT INTO tags (name) VALUES ('Videos');

INSERT INTO tags (name) VALUES ('New preprint');
INSERT INTO tags (name) VALUES ('Chapter');

INSERT INTO tags (name) VALUES ('File Available');
INSERT INTO tags (name) VALUES ('Full-text available');

/**
* tags related to medical specialities
**/
INSERT INTO tags (name) VALUES ('Abdominal Radiology');
INSERT INTO tags (name) VALUES ('Addiction Psychiatry');
INSERT INTO tags (name) VALUES ('Adolescent Medicine');
INSERT INTO tags (name) VALUES ('Abdominal Radiology');
INSERT INTO tags (name) VALUES ('Adult Cardiothoracic Anesthesiology');
INSERT INTO tags (name) VALUES ('Adult Reconstructive Orthopaedics');
INSERT INTO tags (name) VALUES ('Advanced Heart Failure & Transplant Cardiology');
INSERT INTO tags (name) VALUES ('Allergy & Immunology');
INSERT INTO tags (name) VALUES ('Anesthesiology');

INSERT INTO tags (name) VALUES ('Biochemical Genetics');
INSERT INTO tags (name) VALUES ('Blood Banking - Transfusion Medicine');

INSERT INTO tags (name) VALUES ('Cardiothoracic Radiology');
INSERT INTO tags (name) VALUES ('Cardiovascular Disease');
INSERT INTO tags (name) VALUES ('Chemical Pathology');
INSERT INTO tags (name) VALUES ('Child & Adolescent Psychiatry');
INSERT INTO tags (name) VALUES ('Child Abuse Pediatrics');
INSERT INTO tags (name) VALUES ('Child Neurology');
INSERT INTO tags (name) VALUES ('Clinical & Laboratory Immunology');
INSERT INTO tags (name) VALUES ('Clinical Cardiac Electrophysiology');
INSERT INTO tags (name) VALUES ('Clinical Neurophysiology');
INSERT INTO tags (name) VALUES ('Colon & Rectal Surgery');
INSERT INTO tags (name) VALUES ('Congenital Cardiac Surgery');
INSERT INTO tags (name) VALUES ('Craniofacial Surgery');
INSERT INTO tags (name) VALUES ('Critical Care Medicine');
INSERT INTO tags (name) VALUES ('Critical Care Medicine');
INSERT INTO tags (name) VALUES ('Cytopathology');

INSERT INTO tags (name) VALUES ('Dermatology');
INSERT INTO tags (name) VALUES ('Dermatopathology');
INSERT INTO tags (name) VALUES ('Developmental-Behavioral Pediatrics');

INSERT INTO tags (name) VALUES ('Emergency Medicine');
INSERT INTO tags (name) VALUES ('Endocrinology, Diabetes & Metabolism');
INSERT INTO tags (name) VALUES ('Endovascular Surgical Neuroradiology');
INSERT INTO tags (name) VALUES ('Endovascular Surgical Neuroradiology');
INSERT INTO tags (name) VALUES ('Endovascular Surgical Neuroradiology');

INSERT INTO tags (name) VALUES ('Family Medicine');
INSERT INTO tags (name) VALUES ('Family Practice');
INSERT INTO tags (name) VALUES ('Female Pelvic Medicine & Reconstructive Surgery');
INSERT INTO tags (name) VALUES ('Foot & Ankle Orthopaedics');
INSERT INTO tags (name) VALUES ('Forensic Pathology');
INSERT INTO tags (name) VALUES ('Forensic Psychiatry');

INSERT INTO tags (name) VALUES ('Gastroenterology');
INSERT INTO tags (name) VALUES ('Geriatric Medicine');
INSERT INTO tags (name) VALUES ('Geriatric Psychiatry');

INSERT INTO tags (name) VALUES ('Hand Surgery');
INSERT INTO tags (name) VALUES ('Hematology');
INSERT INTO tags (name) VALUES ('Hematology & Oncology');

INSERT INTO tags (name) VALUES ('Infectious Disease');
INSERT INTO tags (name) VALUES ('Internal Medicine');
INSERT INTO tags (name) VALUES ('Internal Medicine-Pediatrics');
INSERT INTO tags (name) VALUES ('Interventional Cardiology');

INSERT INTO tags (name) VALUES ('Medical Genetics');
INSERT INTO tags (name) VALUES ('Medical Microbiology'); 
INSERT INTO tags (name) VALUES ('Medical Toxicology');
INSERT INTO tags (name) VALUES ('Molecular Genetic Pathology');
INSERT INTO tags (name) VALUES ('Muscoskeletal Radiology');
INSERT INTO tags (name) VALUES ('Musculoskeletal Oncology');

INSERT INTO tags (name) VALUES ('Neonatal-Perinatal Medicine');
INSERT INTO tags (name) VALUES ('Nephrology');
INSERT INTO tags (name) VALUES ('Neurological Surgery');
INSERT INTO tags (name) VALUES ('Neurology');
INSERT INTO tags (name) VALUES ('Neuromuscular Medicine');
INSERT INTO tags (name) VALUES ('Neuropathology');
INSERT INTO tags (name) VALUES ('Neuroradiology');
INSERT INTO tags (name) VALUES ('Nuclear Medicine');
INSERT INTO tags (name) VALUES ('Nuclear Radiology');

INSERT INTO tags (name) VALUES ('Obstetric Anesthesiology');
INSERT INTO tags (name) VALUES ('Obstetrics & Gynecology');
INSERT INTO tags (name) VALUES ('Oncology');
INSERT INTO tags (name) VALUES ('Ophthalmic Plastic & Reconstructive Surgery');
INSERT INTO tags (name) VALUES ('Ophthalmology');
INSERT INTO tags (name) VALUES ('Orthopaedic Sports Medicine');
INSERT INTO tags (name) VALUES ('Orthopaedic Surgery');
INSERT INTO tags (name) VALUES ('Orthopaedic Surgery of the Spine');
INSERT INTO tags (name) VALUES ('Orthopaedic Trauma');
INSERT INTO tags (name) VALUES ('Otolaryngology');
INSERT INTO tags (name) VALUES ('Otology - Neurotology');

INSERT INTO tags (name) VALUES ('Pain Medicine');
INSERT INTO tags (name) VALUES ('Pathology-Anatomic & Clinical');
INSERT INTO tags (name) VALUES ('Pediatric Anesthesiology');
INSERT INTO tags (name) VALUES ('Pediatric Cardiology');
INSERT INTO tags (name) VALUES ('Pediatric Critical Care Medicine');
INSERT INTO tags (name) VALUES ('Pediatric Emergency Medicine');
INSERT INTO tags (name) VALUES ('Pediatric Endocrinology');
INSERT INTO tags (name) VALUES ('Pediatric Gastroenterology');
INSERT INTO tags (name) VALUES ('Pediatric Hematology-Oncology');
INSERT INTO tags (name) VALUES ('Pediatric Infectious Diseases');
INSERT INTO tags (name) VALUES ('Pediatric Nephrology');
INSERT INTO tags (name) VALUES ('Pediatric Orthopaedics');
INSERT INTO tags (name) VALUES ('Pediatric Otolaryngology');
INSERT INTO tags (name) VALUES ('Pediatric Pathology');
INSERT INTO tags (name) VALUES ('Pediatric Pulmonology');
INSERT INTO tags (name) VALUES ('Pediatric Radiology');
INSERT INTO tags (name) VALUES ('Pediatric Rheumatology');
INSERT INTO tags (name) VALUES ('Pediatric Sports Medicine');
INSERT INTO tags (name) VALUES ('Pediatric Surgery');
INSERT INTO tags (name) VALUES ('Pediatric Transplant Hepatology');
INSERT INTO tags (name) VALUES ('Pediatric Urology');
INSERT INTO tags (name) VALUES ('Pediatrics');
INSERT INTO tags (name) VALUES ('Physical Medicine & Rehabilitation');
INSERT INTO tags (name) VALUES ('Plastic Surgery');
INSERT INTO tags (name) VALUES ('Preventive Medicine');
INSERT INTO tags (name) VALUES ('Procedural Dermatology');
INSERT INTO tags (name) VALUES ('Psychiatry');
INSERT INTO tags (name) VALUES ('Pulmonary Disease');
INSERT INTO tags (name) VALUES ('Pulmonary Disease & Critical Care Medicine');

INSERT INTO tags (name) VALUES ('Radiation Oncology');
INSERT INTO tags (name) VALUES ('Radiology-Diagnostic');
INSERT INTO tags (name) VALUES ('Rheumatology');

INSERT INTO tags (name) VALUES ('Sleep Medicine');
INSERT INTO tags (name) VALUES ('Spinal Cord Injury Medicine');
INSERT INTO tags (name) VALUES ('Sports Medicine');
INSERT INTO tags (name) VALUES ('Surgery-General');
INSERT INTO tags (name) VALUES ('Surgical Critical Care');

INSERT INTO tags (name) VALUES ('Thoracic Surgery');
INSERT INTO tags (name) VALUES ('Thoracic Surgery-Integrated');
INSERT INTO tags (name) VALUES ('Transplant Hepatology');

INSERT INTO tags (name) VALUES ('Urology');

INSERT INTO tags (name) VALUES ('Vascular & Interventional Radiology');
INSERT INTO tags (name) VALUES ('Vascular Surgery');


/**
* POST - TAGS
*/
INSERT INTO posts_tags (post,tag) VALUES (3,10);
INSERT INTO posts_tags (post,tag) VALUES (3,12);
INSERT INTO posts_tags (post,tag) VALUES (3,15);
INSERT INTO posts_tags (post,tag) VALUES (3,20);
INSERT INTO posts_tags (post,tag) VALUES (4,22);
INSERT INTO posts_tags (post,tag) VALUES (4,25);
INSERT INTO posts_tags (post,tag) VALUES (13,26);
INSERT INTO posts_tags (post,tag) VALUES (13,28);
INSERT INTO posts_tags (post,tag) VALUES (13,29);
INSERT INTO posts_tags (post,tag) VALUES (3,30);
INSERT INTO posts_tags (post,tag) VALUES (3,32);


/**
* POST - Subscriptions/Rates
*/
INSERT INTO posts_subscriptions (subscriber, post) VALUES (1, 1);
INSERT INTO posts_subscriptions (subscriber, post) VALUES (1, 2);

INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 1);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 1, 1);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 1);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 1);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 2);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 1, 2);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 2);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 2);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 3);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 4, 3);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 4);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 4);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 5);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 4, 6);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 6);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 6);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 7);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 7);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 8);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 4, 8);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 9);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 9);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 10);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 4, 20);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 21);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 21);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 22);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 4, 23);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 23);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 23);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 23);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 1, 24);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 24);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 4, 24);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 24);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 24);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 24);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 4, 13);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 5, 13);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 14);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 3, 16);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 4, 17);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (2, 1, 17);
INSERT INTO posts_rates (evaluator, rate, post) VALUES (3, 2, 19);

/**
* INVITES
*/
INSERT INTO invites (invited_user, invite_subject_id, invite_type) VALUES (1, 6, 'post');


/**
* CHALLENGES
*/
INSERT INTO challenges (title, description, dateStart, dateEnd, points, challengeType, question, answers, talk) VALUES ('Challenge Options 1','This is a multiple choice question challenge!','2019-05-05 23:00','2019-05-05 23:59',10,'question_options','What is the title of this conference?','{"CorrectAnswer: Admin conference 1", "Answer: Admin conference 1","Answer: User conference 2","Answer: Admin conference 3", "Answer: Admin conference 4"}', 3);
INSERT INTO challenges (title, description, dateStart, dateEnd, points, challengeType, post, talk) VALUES ('Challenge Comment Post 1','Comment on the owner post to win a lot of points!','2019-05-05 23:00','2019-05-05 23:59',10,'comment_post',25,3);
INSERT INTO challenges (title, description, dateStart, dateEnd, points, challengeType, talk) VALUES ('Challenge Create Post 1', 'Create a Post in this talk where you explain why it is so important for you!','2019-05-05 23:00','2019-05-05 23:59',10,'create_post',3);
INSERT INTO challenges (title, description, dateStart, dateEnd, points, challengeType, talk) VALUES ('Challenge Create Post 2', 'Create a Post in this talk where you explain why it is so important for you!','2019-05-05 23:00','2020-05-05 23:59',10,'create_post',3);
INSERT INTO challenges (title, description, dateStart, dateEnd, points, challengeType, talk) VALUES ('Challenge Create Post 3', 'Create a Post in this talk where you explain why it is so important for you!','2020-05-05 23:00','2020-05-05 23:59',10,'create_post',3);

/**
* PRODUCTS
*/
INSERT INTO products (name, stock, points, date_created, image) VALUES ('Product 1', 31, 30, '2019-05-05 23:00', 'https://images-na.ssl-images-amazon.com/images/I/51CVAV6ZGkL._SL1000_.jpg');
INSERT INTO products (name, stock, points, date_created, image) VALUES ('Product 2', 42, 40, '2019-05-09 23:00', 'https://a2.vnda.com.br/1200x/pedeapoio/2019/02/28/20196-estetoscopio-littmann-master-cardiology-brass-finish-ref-2175-1781.jpg?1551371775');
INSERT INTO products (name, stock, points, date_created) VALUES ('Product 3', 3, 100, '2019-05-23 22:00');
INSERT INTO products (name, stock, points, date_created) VALUES ('Product 4', 1, 300, '2019-05-15 23:00');
INSERT INTO products (name, stock, points, date_created, image) VALUES ('Product 5', 12, 95, '2019-04-20 23:00', 'https://cdn.shopify.com/s/files/1/1217/7182/products/product-image-153801932_752ae95c-0406-41c7-b4c8-3a65b4494e24_800x.jpg?v=1549070825');
INSERT INTO products (name, stock, points, date_created, conference, image) VALUES ('Product 6', 40, 4, '2019-04-20 23:00', 1, 'https://images-na.ssl-images-amazon.com/images/I/51CVAV6ZGkL._SL1000_.jpg');
INSERT INTO products (name, stock, points, date_created, conference) VALUES ('Product 7', 5, 255, '2019-05-20 23:00', 1);
INSERT INTO products (name, stock, points, date_created, conference, image) VALUES ('Product 8', 4, 53, '2019-05-02 23:00', 1, 'https://cdn.shopify.com/s/files/1/1217/7182/products/product-image-153801932_752ae95c-0406-41c7-b4c8-3a65b4494e24_800x.jpg?v=1549070825');
INSERT INTO products (name, stock, points, date_created, conference, image) VALUES ('Product 9', 12, 44, '2019-04-07 23:00', 2, 'https://images-na.ssl-images-amazon.com/images/I/51CVAV6ZGkL._SL1000_.jpg');