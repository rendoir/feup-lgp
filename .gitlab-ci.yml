image: registry.gitlab.com/alexandreaam/lgp-3a/base_ci:latest
services:
  - docker:dind

stages:
  - build
  - lint
  - test
  - release
  # - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  WEB_PRE_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/web:$CI_COMMIT_REF_SLUG
  API_PRE_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/api:$CI_COMMIT_REF_SLUG
  DB_PRE_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/db:$CI_COMMIT_REF_SLUG
  API_TEST_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/apitest:$CI_COMMIT_REF_SLUG
  E2E_TEST_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/e2e:$CI_COMMIT_REF_SLUG
  WEB_STAGING_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/web:latest
  API_STAGING_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/api:latest
  DB_STAGING_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/db:latest
  WEB_PROD_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/web:stable
  API_PROD_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/api:stable
  DB_PROD_IMAGE: registry.gitlab.com/alexandreaam/lgp-3a/db:stable

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com

build_web:
  stage: build
  script:
    - mkdir -p web/docker
    - cd web
    - echo "$SITE_CRT" | tr -d '\r' > docker/site.crt
    - echo "$SITE_KEY" | tr -d '\r' > docker/site.key
    # - echo "$NGINX_CONF" | tr -d '\r' > docker/nginx.conf
    - docker image build -t $WEB_PRE_IMAGE .
    - docker push $WEB_PRE_IMAGE

build_api:
  stage: build
  script:
    - mkdir -p api/docker
    - mv environment/prod.env api/docker/prod.env
    - cd api
    - echo "$API_CRT" | tr -d '\r' > docker/api.crt
    - echo "$API_KEY" | tr -d '\r' > docker/api.key
    - echo "$SECRETS" | tr -d '\r' > docker/secrets.env
    - docker image build -t $API_PRE_IMAGE .
    - docker push $API_PRE_IMAGE
    - apidoc -i src/routes -o public
  artifacts:
    paths:
    - api/public

build_db:
  stage: build
  script:
    - cd db
    - docker image build --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD -t $DB_PRE_IMAGE .
    - docker push $DB_PRE_IMAGE

build_api_tests:
  stage: build
  script:
    - mkdir -p api/docker
    - mv environment/prod.env api/docker/prod.env
    - cd api
    # - echo "$API_CRT" | tr -d '\r' > docker/api.crt
    # - echo "$API_KEY" | tr -d '\r' > docker/api.key
    - echo "$SECRETS" | tr -d '\r' > docker/secrets.env
    - docker image build -f test.dockerfile -t $API_TEST_IMAGE .
    - docker push $API_TEST_IMAGE

# build_e2e_tests:
#   stage: build
#   script:
#     - cd web/e2e
#     - docker image build -t $E2E_TEST_IMAGE .
#     - docker push $E2E_TEST_IMAGE

test_web_linter:
  stage: lint
  script:
    - cd web && npm install && npm run lint

test_api_linter:
  stage: lint
  script:
    - cd api && npm install && npm run lint

# web_integration_tests:
#   stage: test
#   script:
#     - chmod +x scripts/write_docker_compose.sh
#     - scripts/write_docker_compose.sh $CI_COMMIT_REF_SLUG
#     - docker-compose pull
#     - docker-compose up -d db
#     - docker-compose up -d api
#     - docker-compose up -d web
#     - docker-compose up -d reverseproxy.xyz
#     - sleep 5
#     - docker-compose up --exit-code-from e2e

api_unit_tests:
  stage: test
  script:
    - cd api
    - chmod +x ../scripts/write_api_compose.sh
    - ../scripts/write_api_compose.sh $CI_COMMIT_REF_SLUG
    - docker-compose pull
    # - docker-compose up -d db
    # - sleep 5
    - docker-compose up --exit-code-from apitest

release-web-staging:
  stage: release
  script:
    - docker pull $WEB_PRE_IMAGE
    - docker tag $WEB_PRE_IMAGE $WEB_STAGING_IMAGE
    - docker push $WEB_STAGING_IMAGE
  only:
    - development

release-api-staging:
  stage: release
  script:
    - docker pull $API_PRE_IMAGE
    - docker tag $API_PRE_IMAGE $API_STAGING_IMAGE
    - docker push $API_STAGING_IMAGE
  only:
    - development

release-db-staging:
  stage: release
  script:
    - docker pull $DB_PRE_IMAGE
    - docker tag $DB_PRE_IMAGE $DB_STAGING_IMAGE
    - docker push $DB_STAGING_IMAGE
  only:
    - development

release-web-prod:
  stage: release
  script:
    - docker pull $WEB_PRE_IMAGE
    - docker tag $WEB_PRE_IMAGE $WEB_PROD_IMAGE
    - docker push $WEB_PROD_IMAGE
  only:
    - master

release-api-prod:
  stage: release
  script:
    - docker pull $API_PRE_IMAGE
    - docker tag $API_PRE_IMAGE $API_PROD_IMAGE
    - docker push $API_PROD_IMAGE
  only:
    - master

release-db-prod:
  stage: release
  script:
    - docker pull $DB_PRE_IMAGE
    - docker tag $DB_PRE_IMAGE $DB_PROD_IMAGE
    - docker push $DB_PROD_IMAGE
  only:
    - master

# deploy:
#   stage: deploy
#   script:
#     - echo "$SSH_KEY" | tr -d '\r' > rsa_voidlab
#     - chmod 600 rsa_voidlab
#     - ssh -o StrictHostKeyChecking=no -i "rsa_voidlab" user@voidlab.fe.up.pt 'sudo ./update.sh'
